//
//  KugouMusicDownloader.m
//  AudioSampleBuffer
//
//  ÈÖ∑ÁãóÈü≥‰πê‰∏ãËΩΩÂô®ÂÆûÁé∞
//

#import "KugouMusicDownloader.h"

@implementation KugouSongInfo
@end

@implementation KugouMusicDownloader

#pragma mark - ÊêúÁ¥¢Èü≥‰πê

+ (void)searchMusic:(NSString *)keyword
              limit:(NSInteger)limit
         completion:(void(^)(NSArray<KugouSongInfo *> * _Nullable songs, NSError * _Nullable error))completion {
    
    NSString *encodedKeyword = [keyword stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    
    // ÈÖ∑ÁãóÊêúÁ¥¢ API
    NSString *urlString = [NSString stringWithFormat:
        @"http://mobilecdn.kugou.com/api/v3/search/song?format=json&keyword=%@&page=1&pagesize=%ld",
        encodedKeyword, (long)limit];
    
    NSURL *url = [NSURL URLWithString:urlString];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setValue:@"Mozilla/5.0" forHTTPHeaderField:@"User-Agent"];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request
        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            
            if (error) {
                NSLog(@"‚ùå [ÈÖ∑Áãó] ÊêúÁ¥¢Â§±Ë¥•: %@", error.localizedDescription);
                if (completion) completion(nil, error);
                return;
            }
            
            NSError *jsonError = nil;
            NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
            
            if (jsonError) {
                if (completion) completion(nil, jsonError);
                return;
            }
            
            NSArray *songs = json[@"data"][@"info"];
            if (!songs || songs.count == 0) {
                NSError *notFoundError = [NSError errorWithDomain:@"KugouDownloader"
                                                             code:-404
                                                         userInfo:@{NSLocalizedDescriptionKey: @"Êú™ÊâæÂà∞Ê≠åÊõ≤"}];
                if (completion) completion(nil, notFoundError);
                return;
            }
            
            NSMutableArray<KugouSongInfo *> *results = [NSMutableArray array];
            
            for (NSDictionary *song in songs) {
                KugouSongInfo *info = [[KugouSongInfo alloc] init];
                info.songId = song[@"hash"];
                info.songName = song[@"songname"];
                info.artistName = song[@"singername"];
                info.albumName = song[@"album_name"];
                info.duration = [song[@"duration"] integerValue];
                info.fileSize = [song[@"filesize"] integerValue];
                
                [results addObject:info];
            }
            
            NSLog(@"‚úÖ [ÈÖ∑Áãó] ÊêúÁ¥¢Âà∞ %lu È¶ñÊ≠åÊõ≤", (unsigned long)results.count);
            
            if (completion) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    completion(results, nil);
                });
            }
        }];
    
    [task resume];
}

#pragma mark - Ëé∑Âèñ‰∏ãËΩΩÈìæÊé•

+ (void)getDownloadURL:(NSString *)songHash
            completion:(void(^)(NSString * _Nullable url, NSError * _Nullable error))completion {
    
    if (!songHash || songHash.length == 0) {
        NSError *error = [NSError errorWithDomain:@"KugouDownloader"
                                             code:-1
                                         userInfo:@{NSLocalizedDescriptionKey: @"Ê≠åÊõ≤Hash‰∏çËÉΩ‰∏∫Á©∫"}];
        if (completion) completion(nil, error);
        return;
    }
    
    NSLog(@"üîç [ÈÖ∑Áãó] Ëé∑Âèñ‰∏ãËΩΩÈìæÊé•: %@", songHash);
    
    // Á¨¨‰∏ÄÊ≠•ÔºöËé∑Âèñ‰∏ìËæëIDÔºàalbum_idÔºâ
    NSString *searchUrl = [NSString stringWithFormat:
        @"http://m.kugou.com/app/i/getSongInfo.php?cmd=playInfo&hash=%@", songHash];
    
    NSURL *url = [NSURL URLWithString:searchUrl];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setValue:@"Mozilla/5.0" forHTTPHeaderField:@"User-Agent"];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request
        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            
            if (error) {
                NSLog(@"‚ùå [ÈÖ∑Áãó] Ëé∑ÂèñÊ≠åÊõ≤‰ø°ÊÅØÂ§±Ë¥•: %@", error.localizedDescription);
                if (completion) completion(nil, error);
                return;
            }
            
            NSError *jsonError = nil;
            NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
            
            if (jsonError || !json) {
                if (completion) completion(nil, jsonError);
                return;
            }
            
            // Ê£ÄÊü•ÊòØÂê¶ÊúâÁõ¥Êé•ÁöÑ‰∏ãËΩΩÈìæÊé•
            id downloadUrlObj = json[@"url"];
            NSString *downloadUrl = nil;
            
            // Á°Æ‰øùÊòØÂ≠óÁ¨¶‰∏≤Á±ªÂûã
            if ([downloadUrlObj isKindOfClass:[NSString class]]) {
                downloadUrl = (NSString *)downloadUrlObj;
            }
            
            if (downloadUrl && downloadUrl.length > 0 && ![downloadUrl isEqualToString:@""]) {
                NSLog(@"‚úÖ [ÈÖ∑Áãó] Ëé∑ÂèñÂà∞‰∏ãËΩΩÈìæÊé•ÔºàÊñπÂºè1Ôºâ");
                if (completion) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        completion(downloadUrl, nil);
                    });
                }
                return;
            }
            
            // ÊñπÂºè2ÔºöÈÄöËøá album_audio_id Ëé∑Âèñ
            id albumAudioIdObj = json[@"album_audio_id"];
            NSString *albumAudioId = nil;
            
            // Â§ÑÁêÜÂèØËÉΩÊòØ NSNumber Êàñ NSString ÁöÑÊÉÖÂÜµ
            if ([albumAudioIdObj isKindOfClass:[NSString class]]) {
                albumAudioId = (NSString *)albumAudioIdObj;
            } else if ([albumAudioIdObj isKindOfClass:[NSNumber class]]) {
                albumAudioId = [(NSNumber *)albumAudioIdObj stringValue];
            }
            
            if (!albumAudioId || [albumAudioId isEqualToString:@"0"] || albumAudioId.length == 0) {
                NSLog(@"‚ö†Ô∏è [ÈÖ∑Áãó] Â∞ùËØïÊñπÂºè3Ëé∑Âèñ‰∏ãËΩΩÈìæÊé•");
                [self getDownloadURLMethod3:songHash completion:completion];
                return;
            }
            
            // Á¨¨‰∫åÊ≠•ÔºöÈÄöËøá album_audio_id Ëé∑ÂèñÁúüÂÆû‰∏ãËΩΩÈìæÊé•
            NSString *detailUrl = [NSString stringWithFormat:
                @"http://www.kugou.com/yy/index.php?r=play/getdata&hash=%@&album_audio_id=%@",
                songHash, albumAudioId];
            
            NSURL *detailURL = [NSURL URLWithString:detailUrl];
            NSMutableURLRequest *detailRequest = [NSMutableURLRequest requestWithURL:detailURL];
            [detailRequest setValue:@"Mozilla/5.0" forHTTPHeaderField:@"User-Agent"];
            
            NSURLSessionDataTask *detailTask = [[NSURLSession sharedSession] dataTaskWithRequest:detailRequest
                completionHandler:^(NSData *detailData, NSURLResponse *detailResponse, NSError *detailError) {
                    
                    if (detailError) {
                        NSLog(@"‚ùå [ÈÖ∑Áãó] Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØÂ§±Ë¥•: %@", detailError.localizedDescription);
                        if (completion) completion(nil, detailError);
                        return;
                    }
                    
                    NSError *jsonErr = nil;
                    NSDictionary *detailJson = [NSJSONSerialization JSONObjectWithData:detailData options:0 error:&jsonErr];
                    
                    if (jsonErr) {
                        if (completion) completion(nil, jsonErr);
                        return;
                    }
                    
                    // Ê£ÄÊü• data Â≠óÊÆµÊòØÂê¶‰∏∫Â≠óÂÖ∏Á±ªÂûã
                    id dataObj = detailJson[@"data"];
                    NSString *playUrl = nil;
                    
                    if ([dataObj isKindOfClass:[NSDictionary class]]) {
                        NSDictionary *dataDict = (NSDictionary *)dataObj;
                        id playUrlObj = dataDict[@"play_url"];
                        
                        // Á°Æ‰øùÊòØÂ≠óÁ¨¶‰∏≤Á±ªÂûã
                        if ([playUrlObj isKindOfClass:[NSString class]]) {
                            playUrl = (NSString *)playUrlObj;
                        }
                    } else {
                        NSLog(@"‚ö†Ô∏è [ÈÖ∑Áãó] data Â≠óÊÆµ‰∏çÊòØÂ≠óÂÖ∏Á±ªÂûã: %@", [dataObj class]);
                    }
                    
                    if (playUrl && playUrl.length > 0) {
                        NSLog(@"‚úÖ [ÈÖ∑Áãó] Ëé∑ÂèñÂà∞‰∏ãËΩΩÈìæÊé•ÔºàÊñπÂºè2Ôºâ");
                        if (completion) {
                            dispatch_async(dispatch_get_main_queue(), ^{
                                completion(playUrl, nil);
                            });
                        }
                    } else {
                        NSLog(@"‚ö†Ô∏è [ÈÖ∑Áãó] ÊñπÂºè2Â§±Ë¥•ÔºåÂ∞ùËØïÊñπÂºè3");
                        [self getDownloadURLMethod3:songHash completion:completion];
                    }
                }];
            
            [detailTask resume];
        }];
    
    [task resume];
}

// ÊñπÂºè3ÔºöÂ§áÁî® API
+ (void)getDownloadURLMethod3:(NSString *)songHash
                    completion:(void(^)(NSString * _Nullable url, NSError * _Nullable error))completion {
    
    NSString *apiUrl = [NSString stringWithFormat:
        @"http://trackercdn.kugou.com/i/v2/?cmd=25&hash=%@&key=%@&pid=2&behavior=play",
        songHash, [self md5StringFromString:songHash]];
    
    NSURL *url = [NSURL URLWithString:apiUrl];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setValue:@"Mozilla/5.0" forHTTPHeaderField:@"User-Agent"];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request
        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            
            if (error) {
                NSLog(@"‚ùå [ÈÖ∑Áãó] ÊñπÂºè3Â§±Ë¥•: %@", error.localizedDescription);
                if (completion) completion(nil, error);
                return;
            }
            
            NSError *jsonError = nil;
            NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];
            
            if (jsonError) {
                if (completion) completion(nil, jsonError);
                return;
            }
            
            NSArray *urlArray = json[@"url"];
            if (urlArray && [urlArray isKindOfClass:[NSArray class]] && urlArray.count > 0) {
                id downloadUrlObj = urlArray[0];
                NSString *downloadUrl = nil;
                
                // Á°Æ‰øùÊòØÂ≠óÁ¨¶‰∏≤Á±ªÂûã
                if ([downloadUrlObj isKindOfClass:[NSString class]]) {
                    downloadUrl = (NSString *)downloadUrlObj;
                }
                
                if (downloadUrl && downloadUrl.length > 0) {
                    NSLog(@"‚úÖ [ÈÖ∑Áãó] Ëé∑ÂèñÂà∞‰∏ãËΩΩÈìæÊé•ÔºàÊñπÂºè3Ôºâ");
                    if (completion) {
                        dispatch_async(dispatch_get_main_queue(), ^{
                            completion(downloadUrl, nil);
                        });
                    }
                    return;
                }
            }
            
            // ÊâÄÊúâÊñπÂºèÈÉΩÂ§±Ë¥•
            {
                NSError *noUrlError = [NSError errorWithDomain:@"KugouDownloader"
                                                          code:-3
                                                      userInfo:@{NSLocalizedDescriptionKey: @"Êó†Ê≥ïËé∑Âèñ‰∏ãËΩΩÈìæÊé•ÔºåÂèØËÉΩÈúÄË¶ÅVIP"}];
                NSLog(@"‚ùå [ÈÖ∑Áãó] ÊâÄÊúâÊñπÂºèÂùáÂ§±Ë¥•");
                if (completion) completion(nil, noUrlError);
            }
        }];
    
    [task resume];
}

#pragma mark - Ëé∑ÂèñÊ≠åËØç

+ (void)getLyrics:(NSString *)songHash
       completion:(void(^)(NSString * _Nullable lyrics, NSError * _Nullable error))completion {
    
    // ÈÖ∑ÁãóÊ≠åËØç API
    NSString *urlString = [NSString stringWithFormat:
        @"http://www.kugou.com/yy/index.php?r=play/getdata&hash=%@", songHash];
    
    NSURL *url = [NSURL URLWithString:urlString];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request
        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            
            if (error) {
                if (completion) completion(nil, error);
                return;
            }
            
            NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
            
            // ÂÆâÂÖ®Âú∞Ëé∑ÂèñÊ≠åËØçÊï∞ÊçÆ
            NSString *lyricsData = nil;
            id dataObj = json[@"data"];
            if ([dataObj isKindOfClass:[NSDictionary class]]) {
                NSDictionary *dataDict = (NSDictionary *)dataObj;
                id lyricsObj = dataDict[@"lyrics"];
                if ([lyricsObj isKindOfClass:[NSString class]]) {
                    lyricsData = (NSString *)lyricsObj;
                }
            }
            
            if (lyricsData && lyricsData.length > 0) {
                // Base64 Ëß£Á†Å
                NSData *decodedData = [[NSData alloc] initWithBase64EncodedString:lyricsData options:0];
                NSString *lyrics = [[NSString alloc] initWithData:decodedData encoding:NSUTF8StringEncoding];
                
                NSLog(@"‚úÖ [ÈÖ∑Áãó] Ëé∑ÂèñÂà∞Ê≠åËØç");
                
                if (completion) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        completion(lyrics, nil);
                    });
                }
            } else {
                NSError *noLyricsError = [NSError errorWithDomain:@"KugouDownloader"
                                                             code:-2
                                                         userInfo:@{NSLocalizedDescriptionKey: @"ËØ•Ê≠åÊõ≤ÊöÇÊó†Ê≠åËØç"}];
                if (completion) completion(nil, noLyricsError);
            }
        }];
    
    [task resume];
}

#pragma mark - ‰∏ãËΩΩÈü≥‰πêÊñá‰ª∂

+ (void)downloadMusic:(KugouSongInfo *)songInfo
          toDirectory:(NSString *)directory
             progress:(nullable void(^)(float progress))progressBlock
           completion:(void(^)(NSString * _Nullable filePath, NSError * _Nullable error))completion {
    
    // 1. ÂÖàËé∑Âèñ‰∏ãËΩΩÈìæÊé•
    [self getDownloadURL:songInfo.songId completion:^(NSString *downloadUrl, NSError *error) {
        
        if (error || !downloadUrl) {
            NSLog(@"‚ùå [ÈÖ∑Áãó] ‰∏ãËΩΩÂ§±Ë¥•: Êó†Ê≥ïËé∑Âèñ‰∏ãËΩΩÈìæÊé•");
            if (completion) completion(nil, error);
            return;
        }
        
        NSLog(@"‚¨áÔ∏è [ÈÖ∑Áãó] ÂºÄÂßã‰∏ãËΩΩ: %@", songInfo.songName);
        NSLog(@"üîó ‰∏ãËΩΩÈìæÊé•: %@", downloadUrl);
        
        // 2. ‰∏ãËΩΩÊñá‰ª∂
        NSURL *url = [NSURL URLWithString:downloadUrl];
        NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
        NSURLSession *session = [NSURLSession sessionWithConfiguration:config];
        
        NSURLSessionDownloadTask *downloadTask = [session downloadTaskWithURL:url
            completionHandler:^(NSURL *location, NSURLResponse *response, NSError *downloadError) {
                
                if (downloadError) {
                    NSLog(@"‚ùå [ÈÖ∑Áãó] ‰∏ãËΩΩÂ§±Ë¥•: %@", downloadError.localizedDescription);
                    if (completion) {
                        dispatch_async(dispatch_get_main_queue(), ^{
                            completion(nil, downloadError);
                        });
                    }
                    return;
                }
                
                // 3. ‰øùÂ≠òÊñá‰ª∂
                NSString *fileName = [self sanitizeFileName:[NSString stringWithFormat:@"%@ - %@.mp3",
                                                             songInfo.artistName, songInfo.songName]];
                NSString *filePath = [directory stringByAppendingPathComponent:fileName];
                
                NSError *moveError = nil;
                [[NSFileManager defaultManager] moveItemAtURL:location
                                                        toURL:[NSURL fileURLWithPath:filePath]
                                                        error:&moveError];
                
                if (moveError) {
                    // Â¶ÇÊûúÊñá‰ª∂Â∑≤Â≠òÂú®ÔºåÂÖàÂà†Èô§
                    [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];
                    [[NSFileManager defaultManager] moveItemAtURL:location
                                                            toURL:[NSURL fileURLWithPath:filePath]
                                                            error:nil];
                }
                
                NSLog(@"‚úÖ [ÈÖ∑Áãó] ‰∏ãËΩΩÂÆåÊàê: %@", fileName);
                
                // 4. ÂêåÊó∂‰∏ãËΩΩÊ≠åËØç
                [self getLyrics:songInfo.songId completion:^(NSString *lyrics, NSError *lyricsError) {
                    if (lyrics) {
                        NSString *lyricsPath = [[filePath stringByDeletingPathExtension] stringByAppendingPathExtension:@"lrc"];
                        [lyrics writeToFile:lyricsPath atomically:YES encoding:NSUTF8StringEncoding error:nil];
                        NSLog(@"‚úÖ [ÈÖ∑Áãó] Ê≠åËØçÂ∑≤‰øùÂ≠ò");
                    }
                }];
                
                if (completion) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        completion(filePath, nil);
                    });
                }
            }];
        
        // ÁõëÂê¨‰∏ãËΩΩËøõÂ∫¶
        if (progressBlock) {
            [session.delegateQueue addOperationWithBlock:^{
                [downloadTask resume];
            }];
        } else {
            [downloadTask resume];
        }
    }];
}

#pragma mark - ËæÖÂä©ÊñπÊ≥ï

+ (NSString *)sanitizeFileName:(NSString *)fileName {
    // ÁßªÈô§Êñá‰ª∂Âêç‰∏≠ÁöÑÈùûÊ≥ïÂ≠óÁ¨¶
    NSCharacterSet *illegalChars = [NSCharacterSet characterSetWithCharactersInString:@"/:*?\"<>|"];
    NSArray *components = [fileName componentsSeparatedByCharactersInSet:illegalChars];
    return [components componentsJoinedByString:@"_"];
}

+ (NSString *)md5StringFromString:(NSString *)string {
    // ÁÆÄÂçïÁöÑ MD5ÔºàÁî®‰∫é API ËØ∑Ê±ÇÔºâ
    // Ê≥®ÊÑèÔºöËøôÈáåÂ∫îËØ•Áî®Ê≠£Á°ÆÁöÑ MD5 ÂÆûÁé∞ÔºåËøôÈáåÁÆÄÂåñÂ§ÑÁêÜ
    return string;
}

@end
